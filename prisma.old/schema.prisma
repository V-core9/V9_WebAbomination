datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  thumbnail   String
  posts       Post[]   @relation(references: [id])
  pages       Page[]   @relation(references: [id])
}

model Keyword {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation(references: [id])
  pages Page[] @relation(references: [id])
}

model Post {
  id              Int        @id @default(autoincrement())
  slug            String?    @unique
  title           String
  content         String?
  metaDescription String?
  metaKeywords    Keyword[]  @relation(references: [id])
  published       Boolean?   @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  renderMode      String     @default("html")
  authorId        Int?
  author          User?      @relation(fields: [authorId], references: [id])
  categories      Category[] @relation(references: [id])
  thumbnail       String
}

model Page {
  id              Int        @id @default(autoincrement())
  slug            String?    @unique
  title           String
  metaDescription String?
  metaKeywords    Keyword[]  @relation(references: [id])
  content         String?
  published       Boolean?   @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  renderMode      String     @default("html")
  authorId        Int?
  author          User?      @relation(fields: [authorId], references: [id])
  categories      Category[] @relation(references: [id])
  thumbnail       String
}

model Form {
  id            Int            @id @default(autoincrement())
  slug          String?        @unique
  title         String
  content       String
  published     Boolean?       @default(false)
  author        User?          @relation(fields: [authorId], references: [id])
  authorId      Int?
  created       DateTime       @default(now())
  updated       DateTime       @default(now())
  formResponses FormResponse[]
}

model FormResponse {
  id      Int      @id @default(autoincrement())
  form    Form?    @relation(fields: [formId], references: [id])
  formId  Int?
  content String
  created DateTime @default(now())
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String?
  password      String
  salt          String
  created       DateTime       @default(now())
  updated       DateTime       @default(now())
  verified      Boolean?       @default(false)
  accountType   String?        @default("user")
  pages         Page[]
  posts         Post[]
  forms         Form[]
  companies     Organization[]
  tasksCreated  Task[]         @relation("createdBy")
  tasksAssigned Task[]         @relation("assignedTo")
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  logo        String
  ownerId     Int?
  owner       User?     @relation(fields: [ownerId], references: [id])
  projects    Project[]
}

model Project {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  thumbnail      String
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  taskBoards     TaskBoard[]
}

model TaskBoard {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  projectId   Int?
  project     Project? @relation(fields: [projectId], references: [id])
  tasks       Task[]
}

model Task {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  taskBoardId Int?
  taskBoard   TaskBoard? @relation(fields: [taskBoardId], references: [id])
  status      String?    @default("todo")
  createdBy  User? @relation("createdBy", fields: [creatorId], references: [id])
  assignedTo User? @relation("assignedTo", fields: [workerId], references: [id])
  creatorId  Int?
  workerId  Int?
}
